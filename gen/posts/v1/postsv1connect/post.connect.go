// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: posts/v1/post.proto

package postsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yaninyzwitty/threads-go-backend/gen/posts/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "posts.v1.PostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostServiceCreateLikeProcedure is the fully-qualified name of the PostService's CreateLike RPC.
	PostServiceCreateLikeProcedure = "/posts.v1.PostService/CreateLike"
	// PostServiceIncrementPostLikesProcedure is the fully-qualified name of the PostService's
	// IncrementPostLikes RPC.
	PostServiceIncrementPostLikesProcedure = "/posts.v1.PostService/IncrementPostLikes"
	// PostServiceCreateLikeByUserProcedure is the fully-qualified name of the PostService's
	// CreateLikeByUser RPC.
	PostServiceCreateLikeByUserProcedure = "/posts.v1.PostService/CreateLikeByUser"
	// PostServiceCreatePostProcedure is the fully-qualified name of the PostService's CreatePost RPC.
	PostServiceCreatePostProcedure = "/posts.v1.PostService/CreatePost"
	// PostServiceGetPostProcedure is the fully-qualified name of the PostService's GetPost RPC.
	PostServiceGetPostProcedure = "/posts.v1.PostService/GetPost"
	// PostServiceListPostsByUserProcedure is the fully-qualified name of the PostService's
	// ListPostsByUser RPC.
	PostServiceListPostsByUserProcedure = "/posts.v1.PostService/ListPostsByUser"
	// PostServiceDeletePostProcedure is the fully-qualified name of the PostService's DeletePost RPC.
	PostServiceDeletePostProcedure = "/posts.v1.PostService/DeletePost"
	// PostServiceCreatePostIndexedByUserProcedure is the fully-qualified name of the PostService's
	// CreatePostIndexedByUser RPC.
	PostServiceCreatePostIndexedByUserProcedure = "/posts.v1.PostService/CreatePostIndexedByUser"
	// PostServiceInitializePostEngagementsProcedure is the fully-qualified name of the PostService's
	// InitializePostEngagements RPC.
	PostServiceInitializePostEngagementsProcedure = "/posts.v1.PostService/InitializePostEngagements"
	// PostServiceUpdatePostEngagementsProcedure is the fully-qualified name of the PostService's
	// UpdatePostEngagements RPC.
	PostServiceUpdatePostEngagementsProcedure = "/posts.v1.PostService/UpdatePostEngagements"
)

// PostServiceClient is a client for the posts.v1.PostService service.
type PostServiceClient interface {
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	IncrementPostLikes(context.Context, *connect.Request[v1.IncrementPostLikesRequest]) (*connect.Response[v1.IncrementPostLikesResponse], error)
	CreateLikeByUser(context.Context, *connect.Request[v1.CreateLikeByUserRequest]) (*connect.Response[v1.CreateLikeByUserResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	ListPostsByUser(context.Context, *connect.Request[v1.ListPostsByUserRequest]) (*connect.Response[v1.ListPostsByUserResponse], error)
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
	CreatePostIndexedByUser(context.Context, *connect.Request[v1.CreatePostIndexedByUserRequest]) (*connect.Response[v1.CreatePostIndexedByUserResponse], error)
	InitializePostEngagements(context.Context, *connect.Request[v1.InitializePostEngagementsRequest]) (*connect.Response[v1.InitializePostEngagementsResponse], error)
	UpdatePostEngagements(context.Context, *connect.Request[v1.UpdatePostEngagementsRequest]) (*connect.Response[v1.UpdatePostEngagementsResponse], error)
}

// NewPostServiceClient constructs a client for the posts.v1.PostService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	postServiceMethods := v1.File_posts_v1_post_proto.Services().ByName("PostService").Methods()
	return &postServiceClient{
		createLike: connect.NewClient[v1.CreateLikeRequest, v1.CreateLikeResponse](
			httpClient,
			baseURL+PostServiceCreateLikeProcedure,
			connect.WithSchema(postServiceMethods.ByName("CreateLike")),
			connect.WithClientOptions(opts...),
		),
		incrementPostLikes: connect.NewClient[v1.IncrementPostLikesRequest, v1.IncrementPostLikesResponse](
			httpClient,
			baseURL+PostServiceIncrementPostLikesProcedure,
			connect.WithSchema(postServiceMethods.ByName("IncrementPostLikes")),
			connect.WithClientOptions(opts...),
		),
		createLikeByUser: connect.NewClient[v1.CreateLikeByUserRequest, v1.CreateLikeByUserResponse](
			httpClient,
			baseURL+PostServiceCreateLikeByUserProcedure,
			connect.WithSchema(postServiceMethods.ByName("CreateLikeByUser")),
			connect.WithClientOptions(opts...),
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+PostServiceCreatePostProcedure,
			connect.WithSchema(postServiceMethods.ByName("CreatePost")),
			connect.WithClientOptions(opts...),
		),
		getPost: connect.NewClient[v1.GetPostRequest, v1.GetPostResponse](
			httpClient,
			baseURL+PostServiceGetPostProcedure,
			connect.WithSchema(postServiceMethods.ByName("GetPost")),
			connect.WithClientOptions(opts...),
		),
		listPostsByUser: connect.NewClient[v1.ListPostsByUserRequest, v1.ListPostsByUserResponse](
			httpClient,
			baseURL+PostServiceListPostsByUserProcedure,
			connect.WithSchema(postServiceMethods.ByName("ListPostsByUser")),
			connect.WithClientOptions(opts...),
		),
		deletePost: connect.NewClient[v1.DeletePostRequest, v1.DeletePostResponse](
			httpClient,
			baseURL+PostServiceDeletePostProcedure,
			connect.WithSchema(postServiceMethods.ByName("DeletePost")),
			connect.WithClientOptions(opts...),
		),
		createPostIndexedByUser: connect.NewClient[v1.CreatePostIndexedByUserRequest, v1.CreatePostIndexedByUserResponse](
			httpClient,
			baseURL+PostServiceCreatePostIndexedByUserProcedure,
			connect.WithSchema(postServiceMethods.ByName("CreatePostIndexedByUser")),
			connect.WithClientOptions(opts...),
		),
		initializePostEngagements: connect.NewClient[v1.InitializePostEngagementsRequest, v1.InitializePostEngagementsResponse](
			httpClient,
			baseURL+PostServiceInitializePostEngagementsProcedure,
			connect.WithSchema(postServiceMethods.ByName("InitializePostEngagements")),
			connect.WithClientOptions(opts...),
		),
		updatePostEngagements: connect.NewClient[v1.UpdatePostEngagementsRequest, v1.UpdatePostEngagementsResponse](
			httpClient,
			baseURL+PostServiceUpdatePostEngagementsProcedure,
			connect.WithSchema(postServiceMethods.ByName("UpdatePostEngagements")),
			connect.WithClientOptions(opts...),
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	createLike                *connect.Client[v1.CreateLikeRequest, v1.CreateLikeResponse]
	incrementPostLikes        *connect.Client[v1.IncrementPostLikesRequest, v1.IncrementPostLikesResponse]
	createLikeByUser          *connect.Client[v1.CreateLikeByUserRequest, v1.CreateLikeByUserResponse]
	createPost                *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	getPost                   *connect.Client[v1.GetPostRequest, v1.GetPostResponse]
	listPostsByUser           *connect.Client[v1.ListPostsByUserRequest, v1.ListPostsByUserResponse]
	deletePost                *connect.Client[v1.DeletePostRequest, v1.DeletePostResponse]
	createPostIndexedByUser   *connect.Client[v1.CreatePostIndexedByUserRequest, v1.CreatePostIndexedByUserResponse]
	initializePostEngagements *connect.Client[v1.InitializePostEngagementsRequest, v1.InitializePostEngagementsResponse]
	updatePostEngagements     *connect.Client[v1.UpdatePostEngagementsRequest, v1.UpdatePostEngagementsResponse]
}

// CreateLike calls posts.v1.PostService.CreateLike.
func (c *postServiceClient) CreateLike(ctx context.Context, req *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return c.createLike.CallUnary(ctx, req)
}

// IncrementPostLikes calls posts.v1.PostService.IncrementPostLikes.
func (c *postServiceClient) IncrementPostLikes(ctx context.Context, req *connect.Request[v1.IncrementPostLikesRequest]) (*connect.Response[v1.IncrementPostLikesResponse], error) {
	return c.incrementPostLikes.CallUnary(ctx, req)
}

// CreateLikeByUser calls posts.v1.PostService.CreateLikeByUser.
func (c *postServiceClient) CreateLikeByUser(ctx context.Context, req *connect.Request[v1.CreateLikeByUserRequest]) (*connect.Response[v1.CreateLikeByUserResponse], error) {
	return c.createLikeByUser.CallUnary(ctx, req)
}

// CreatePost calls posts.v1.PostService.CreatePost.
func (c *postServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// GetPost calls posts.v1.PostService.GetPost.
func (c *postServiceClient) GetPost(ctx context.Context, req *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// ListPostsByUser calls posts.v1.PostService.ListPostsByUser.
func (c *postServiceClient) ListPostsByUser(ctx context.Context, req *connect.Request[v1.ListPostsByUserRequest]) (*connect.Response[v1.ListPostsByUserResponse], error) {
	return c.listPostsByUser.CallUnary(ctx, req)
}

// DeletePost calls posts.v1.PostService.DeletePost.
func (c *postServiceClient) DeletePost(ctx context.Context, req *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return c.deletePost.CallUnary(ctx, req)
}

// CreatePostIndexedByUser calls posts.v1.PostService.CreatePostIndexedByUser.
func (c *postServiceClient) CreatePostIndexedByUser(ctx context.Context, req *connect.Request[v1.CreatePostIndexedByUserRequest]) (*connect.Response[v1.CreatePostIndexedByUserResponse], error) {
	return c.createPostIndexedByUser.CallUnary(ctx, req)
}

// InitializePostEngagements calls posts.v1.PostService.InitializePostEngagements.
func (c *postServiceClient) InitializePostEngagements(ctx context.Context, req *connect.Request[v1.InitializePostEngagementsRequest]) (*connect.Response[v1.InitializePostEngagementsResponse], error) {
	return c.initializePostEngagements.CallUnary(ctx, req)
}

// UpdatePostEngagements calls posts.v1.PostService.UpdatePostEngagements.
func (c *postServiceClient) UpdatePostEngagements(ctx context.Context, req *connect.Request[v1.UpdatePostEngagementsRequest]) (*connect.Response[v1.UpdatePostEngagementsResponse], error) {
	return c.updatePostEngagements.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the posts.v1.PostService service.
type PostServiceHandler interface {
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	IncrementPostLikes(context.Context, *connect.Request[v1.IncrementPostLikesRequest]) (*connect.Response[v1.IncrementPostLikesResponse], error)
	CreateLikeByUser(context.Context, *connect.Request[v1.CreateLikeByUserRequest]) (*connect.Response[v1.CreateLikeByUserResponse], error)
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	ListPostsByUser(context.Context, *connect.Request[v1.ListPostsByUserRequest]) (*connect.Response[v1.ListPostsByUserResponse], error)
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
	CreatePostIndexedByUser(context.Context, *connect.Request[v1.CreatePostIndexedByUserRequest]) (*connect.Response[v1.CreatePostIndexedByUserResponse], error)
	InitializePostEngagements(context.Context, *connect.Request[v1.InitializePostEngagementsRequest]) (*connect.Response[v1.InitializePostEngagementsResponse], error)
	UpdatePostEngagements(context.Context, *connect.Request[v1.UpdatePostEngagementsRequest]) (*connect.Response[v1.UpdatePostEngagementsResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postServiceMethods := v1.File_posts_v1_post_proto.Services().ByName("PostService").Methods()
	postServiceCreateLikeHandler := connect.NewUnaryHandler(
		PostServiceCreateLikeProcedure,
		svc.CreateLike,
		connect.WithSchema(postServiceMethods.ByName("CreateLike")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceIncrementPostLikesHandler := connect.NewUnaryHandler(
		PostServiceIncrementPostLikesProcedure,
		svc.IncrementPostLikes,
		connect.WithSchema(postServiceMethods.ByName("IncrementPostLikes")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceCreateLikeByUserHandler := connect.NewUnaryHandler(
		PostServiceCreateLikeByUserProcedure,
		svc.CreateLikeByUser,
		connect.WithSchema(postServiceMethods.ByName("CreateLikeByUser")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceCreatePostHandler := connect.NewUnaryHandler(
		PostServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(postServiceMethods.ByName("CreatePost")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceGetPostHandler := connect.NewUnaryHandler(
		PostServiceGetPostProcedure,
		svc.GetPost,
		connect.WithSchema(postServiceMethods.ByName("GetPost")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceListPostsByUserHandler := connect.NewUnaryHandler(
		PostServiceListPostsByUserProcedure,
		svc.ListPostsByUser,
		connect.WithSchema(postServiceMethods.ByName("ListPostsByUser")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceDeletePostHandler := connect.NewUnaryHandler(
		PostServiceDeletePostProcedure,
		svc.DeletePost,
		connect.WithSchema(postServiceMethods.ByName("DeletePost")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceCreatePostIndexedByUserHandler := connect.NewUnaryHandler(
		PostServiceCreatePostIndexedByUserProcedure,
		svc.CreatePostIndexedByUser,
		connect.WithSchema(postServiceMethods.ByName("CreatePostIndexedByUser")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceInitializePostEngagementsHandler := connect.NewUnaryHandler(
		PostServiceInitializePostEngagementsProcedure,
		svc.InitializePostEngagements,
		connect.WithSchema(postServiceMethods.ByName("InitializePostEngagements")),
		connect.WithHandlerOptions(opts...),
	)
	postServiceUpdatePostEngagementsHandler := connect.NewUnaryHandler(
		PostServiceUpdatePostEngagementsProcedure,
		svc.UpdatePostEngagements,
		connect.WithSchema(postServiceMethods.ByName("UpdatePostEngagements")),
		connect.WithHandlerOptions(opts...),
	)
	return "/posts.v1.PostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostServiceCreateLikeProcedure:
			postServiceCreateLikeHandler.ServeHTTP(w, r)
		case PostServiceIncrementPostLikesProcedure:
			postServiceIncrementPostLikesHandler.ServeHTTP(w, r)
		case PostServiceCreateLikeByUserProcedure:
			postServiceCreateLikeByUserHandler.ServeHTTP(w, r)
		case PostServiceCreatePostProcedure:
			postServiceCreatePostHandler.ServeHTTP(w, r)
		case PostServiceGetPostProcedure:
			postServiceGetPostHandler.ServeHTTP(w, r)
		case PostServiceListPostsByUserProcedure:
			postServiceListPostsByUserHandler.ServeHTTP(w, r)
		case PostServiceDeletePostProcedure:
			postServiceDeletePostHandler.ServeHTTP(w, r)
		case PostServiceCreatePostIndexedByUserProcedure:
			postServiceCreatePostIndexedByUserHandler.ServeHTTP(w, r)
		case PostServiceInitializePostEngagementsProcedure:
			postServiceInitializePostEngagementsHandler.ServeHTTP(w, r)
		case PostServiceUpdatePostEngagementsProcedure:
			postServiceUpdatePostEngagementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.CreateLike is not implemented"))
}

func (UnimplementedPostServiceHandler) IncrementPostLikes(context.Context, *connect.Request[v1.IncrementPostLikesRequest]) (*connect.Response[v1.IncrementPostLikesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.IncrementPostLikes is not implemented"))
}

func (UnimplementedPostServiceHandler) CreateLikeByUser(context.Context, *connect.Request[v1.CreateLikeByUserRequest]) (*connect.Response[v1.CreateLikeByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.CreateLikeByUser is not implemented"))
}

func (UnimplementedPostServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.CreatePost is not implemented"))
}

func (UnimplementedPostServiceHandler) GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.GetPost is not implemented"))
}

func (UnimplementedPostServiceHandler) ListPostsByUser(context.Context, *connect.Request[v1.ListPostsByUserRequest]) (*connect.Response[v1.ListPostsByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.ListPostsByUser is not implemented"))
}

func (UnimplementedPostServiceHandler) DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.DeletePost is not implemented"))
}

func (UnimplementedPostServiceHandler) CreatePostIndexedByUser(context.Context, *connect.Request[v1.CreatePostIndexedByUserRequest]) (*connect.Response[v1.CreatePostIndexedByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.CreatePostIndexedByUser is not implemented"))
}

func (UnimplementedPostServiceHandler) InitializePostEngagements(context.Context, *connect.Request[v1.InitializePostEngagementsRequest]) (*connect.Response[v1.InitializePostEngagementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.InitializePostEngagements is not implemented"))
}

func (UnimplementedPostServiceHandler) UpdatePostEngagements(context.Context, *connect.Request[v1.UpdatePostEngagementsRequest]) (*connect.Response[v1.UpdatePostEngagementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("posts.v1.PostService.UpdatePostEngagements is not implemented"))
}
