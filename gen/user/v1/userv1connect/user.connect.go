// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/yaninyzwitty/threads-go-backend/gen/user/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceLoginUserProcedure is the fully-qualified name of the UserService's LoginUser RPC.
	UserServiceLoginUserProcedure = "/user.v1.UserService/LoginUser"
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/user.v1.UserService/CreateUser"
	// UserServiceRefreshTokenProcedure is the fully-qualified name of the UserService's RefreshToken
	// RPC.
	UserServiceRefreshTokenProcedure = "/user.v1.UserService/RefreshToken"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/user.v1.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/user.v1.UserService/DeleteUser"
	// UserServiceGetUserByIDProcedure is the fully-qualified name of the UserService's GetUserByID RPC.
	UserServiceGetUserByIDProcedure = "/user.v1.UserService/GetUserByID"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/user.v1.UserService/ListUsers"
	// UserServiceFollowUserProcedure is the fully-qualified name of the UserService's FollowUser RPC.
	UserServiceFollowUserProcedure = "/user.v1.UserService/FollowUser"
	// UserServiceUnfollowUserProcedure is the fully-qualified name of the UserService's UnfollowUser
	// RPC.
	UserServiceUnfollowUserProcedure = "/user.v1.UserService/UnfollowUser"
	// UserServiceIncrementFollowingAndFollowerCountProcedure is the fully-qualified name of the
	// UserService's IncrementFollowingAndFollowerCount RPC.
	UserServiceIncrementFollowingAndFollowerCountProcedure = "/user.v1.UserService/IncrementFollowingAndFollowerCount"
	// UserServiceDecrementFollowingAndFollowerCountProcedure is the fully-qualified name of the
	// UserService's DecrementFollowingAndFollowerCount RPC.
	UserServiceDecrementFollowingAndFollowerCountProcedure = "/user.v1.UserService/DecrementFollowingAndFollowerCount"
	// UserServiceFollowUserCachedProcedure is the fully-qualified name of the UserService's
	// FollowUserCached RPC.
	UserServiceFollowUserCachedProcedure = "/user.v1.UserService/FollowUserCached"
	// UserServiceUnfollowUserCachedProcedure is the fully-qualified name of the UserService's
	// UnfollowUserCached RPC.
	UserServiceUnfollowUserCachedProcedure = "/user.v1.UserService/UnfollowUserCached"
	// UserServiceInsertFollowerCountsProcedure is the fully-qualified name of the UserService's
	// InsertFollowerCounts RPC.
	UserServiceInsertFollowerCountsProcedure = "/user.v1.UserService/InsertFollowerCounts"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error)
	UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error)
	IncrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.IncrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.IncrementFollowingAndFollowerCountResponse], error)
	DecrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.DecrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.DecrementFollowingAndFollowerCountResponse], error)
	FollowUserCached(context.Context, *connect.Request[v1.FollowUserCachedRequest]) (*connect.Response[v1.FollowUserCachedResponse], error)
	UnfollowUserCached(context.Context, *connect.Request[v1.UnfollowUserCachedRequest]) (*connect.Response[v1.UnfollowUserCachedResponse], error)
	InsertFollowerCounts(context.Context, *connect.Request[v1.InsertFollowerCountsRequest]) (*connect.Response[v1.InsertFollowerCountsResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		loginUser: connect.NewClient[v1.LoginUserRequest, v1.LoginUserResponse](
			httpClient,
			baseURL+UserServiceLoginUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("LoginUser")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+UserServiceRefreshTokenProcedure,
			connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getUserByID: connect.NewClient[v1.GetUserByIDRequest, v1.GetUserByIDResponse](
			httpClient,
			baseURL+UserServiceGetUserByIDProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserByID")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		followUser: connect.NewClient[v1.FollowUserRequest, v1.FollowUserResponse](
			httpClient,
			baseURL+UserServiceFollowUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("FollowUser")),
			connect.WithClientOptions(opts...),
		),
		unfollowUser: connect.NewClient[v1.UnfollowUserRequest, v1.UnfollowUserResponse](
			httpClient,
			baseURL+UserServiceUnfollowUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnfollowUser")),
			connect.WithClientOptions(opts...),
		),
		incrementFollowingAndFollowerCount: connect.NewClient[v1.IncrementFollowingAndFollowerCountRequest, v1.IncrementFollowingAndFollowerCountResponse](
			httpClient,
			baseURL+UserServiceIncrementFollowingAndFollowerCountProcedure,
			connect.WithSchema(userServiceMethods.ByName("IncrementFollowingAndFollowerCount")),
			connect.WithClientOptions(opts...),
		),
		decrementFollowingAndFollowerCount: connect.NewClient[v1.DecrementFollowingAndFollowerCountRequest, v1.DecrementFollowingAndFollowerCountResponse](
			httpClient,
			baseURL+UserServiceDecrementFollowingAndFollowerCountProcedure,
			connect.WithSchema(userServiceMethods.ByName("DecrementFollowingAndFollowerCount")),
			connect.WithClientOptions(opts...),
		),
		followUserCached: connect.NewClient[v1.FollowUserCachedRequest, v1.FollowUserCachedResponse](
			httpClient,
			baseURL+UserServiceFollowUserCachedProcedure,
			connect.WithSchema(userServiceMethods.ByName("FollowUserCached")),
			connect.WithClientOptions(opts...),
		),
		unfollowUserCached: connect.NewClient[v1.UnfollowUserCachedRequest, v1.UnfollowUserCachedResponse](
			httpClient,
			baseURL+UserServiceUnfollowUserCachedProcedure,
			connect.WithSchema(userServiceMethods.ByName("UnfollowUserCached")),
			connect.WithClientOptions(opts...),
		),
		insertFollowerCounts: connect.NewClient[v1.InsertFollowerCountsRequest, v1.InsertFollowerCountsResponse](
			httpClient,
			baseURL+UserServiceInsertFollowerCountsProcedure,
			connect.WithSchema(userServiceMethods.ByName("InsertFollowerCounts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	loginUser                          *connect.Client[v1.LoginUserRequest, v1.LoginUserResponse]
	createUser                         *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	refreshToken                       *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	updateUser                         *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser                         *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	getUserByID                        *connect.Client[v1.GetUserByIDRequest, v1.GetUserByIDResponse]
	listUsers                          *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	followUser                         *connect.Client[v1.FollowUserRequest, v1.FollowUserResponse]
	unfollowUser                       *connect.Client[v1.UnfollowUserRequest, v1.UnfollowUserResponse]
	incrementFollowingAndFollowerCount *connect.Client[v1.IncrementFollowingAndFollowerCountRequest, v1.IncrementFollowingAndFollowerCountResponse]
	decrementFollowingAndFollowerCount *connect.Client[v1.DecrementFollowingAndFollowerCountRequest, v1.DecrementFollowingAndFollowerCountResponse]
	followUserCached                   *connect.Client[v1.FollowUserCachedRequest, v1.FollowUserCachedResponse]
	unfollowUserCached                 *connect.Client[v1.UnfollowUserCachedRequest, v1.UnfollowUserCachedResponse]
	insertFollowerCounts               *connect.Client[v1.InsertFollowerCountsRequest, v1.InsertFollowerCountsResponse]
}

// LoginUser calls user.v1.UserService.LoginUser.
func (c *userServiceClient) LoginUser(ctx context.Context, req *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// CreateUser calls user.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// RefreshToken calls user.v1.UserService.RefreshToken.
func (c *userServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// UpdateUser calls user.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls user.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetUserByID calls user.v1.UserService.GetUserByID.
func (c *userServiceClient) GetUserByID(ctx context.Context, req *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error) {
	return c.getUserByID.CallUnary(ctx, req)
}

// ListUsers calls user.v1.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// FollowUser calls user.v1.UserService.FollowUser.
func (c *userServiceClient) FollowUser(ctx context.Context, req *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error) {
	return c.followUser.CallUnary(ctx, req)
}

// UnfollowUser calls user.v1.UserService.UnfollowUser.
func (c *userServiceClient) UnfollowUser(ctx context.Context, req *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error) {
	return c.unfollowUser.CallUnary(ctx, req)
}

// IncrementFollowingAndFollowerCount calls user.v1.UserService.IncrementFollowingAndFollowerCount.
func (c *userServiceClient) IncrementFollowingAndFollowerCount(ctx context.Context, req *connect.Request[v1.IncrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.IncrementFollowingAndFollowerCountResponse], error) {
	return c.incrementFollowingAndFollowerCount.CallUnary(ctx, req)
}

// DecrementFollowingAndFollowerCount calls user.v1.UserService.DecrementFollowingAndFollowerCount.
func (c *userServiceClient) DecrementFollowingAndFollowerCount(ctx context.Context, req *connect.Request[v1.DecrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.DecrementFollowingAndFollowerCountResponse], error) {
	return c.decrementFollowingAndFollowerCount.CallUnary(ctx, req)
}

// FollowUserCached calls user.v1.UserService.FollowUserCached.
func (c *userServiceClient) FollowUserCached(ctx context.Context, req *connect.Request[v1.FollowUserCachedRequest]) (*connect.Response[v1.FollowUserCachedResponse], error) {
	return c.followUserCached.CallUnary(ctx, req)
}

// UnfollowUserCached calls user.v1.UserService.UnfollowUserCached.
func (c *userServiceClient) UnfollowUserCached(ctx context.Context, req *connect.Request[v1.UnfollowUserCachedRequest]) (*connect.Response[v1.UnfollowUserCachedResponse], error) {
	return c.unfollowUserCached.CallUnary(ctx, req)
}

// InsertFollowerCounts calls user.v1.UserService.InsertFollowerCounts.
func (c *userServiceClient) InsertFollowerCounts(ctx context.Context, req *connect.Request[v1.InsertFollowerCountsRequest]) (*connect.Response[v1.InsertFollowerCountsResponse], error) {
	return c.insertFollowerCounts.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error)
	UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error)
	IncrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.IncrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.IncrementFollowingAndFollowerCountResponse], error)
	DecrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.DecrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.DecrementFollowingAndFollowerCountResponse], error)
	FollowUserCached(context.Context, *connect.Request[v1.FollowUserCachedRequest]) (*connect.Response[v1.FollowUserCachedResponse], error)
	UnfollowUserCached(context.Context, *connect.Request[v1.UnfollowUserCachedRequest]) (*connect.Response[v1.UnfollowUserCachedResponse], error)
	InsertFollowerCounts(context.Context, *connect.Request[v1.InsertFollowerCountsRequest]) (*connect.Response[v1.InsertFollowerCountsResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceLoginUserHandler := connect.NewUnaryHandler(
		UserServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(userServiceMethods.ByName("LoginUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRefreshTokenHandler := connect.NewUnaryHandler(
		UserServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserByIDHandler := connect.NewUnaryHandler(
		UserServiceGetUserByIDProcedure,
		svc.GetUserByID,
		connect.WithSchema(userServiceMethods.ByName("GetUserByID")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceFollowUserHandler := connect.NewUnaryHandler(
		UserServiceFollowUserProcedure,
		svc.FollowUser,
		connect.WithSchema(userServiceMethods.ByName("FollowUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnfollowUserHandler := connect.NewUnaryHandler(
		UserServiceUnfollowUserProcedure,
		svc.UnfollowUser,
		connect.WithSchema(userServiceMethods.ByName("UnfollowUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceIncrementFollowingAndFollowerCountHandler := connect.NewUnaryHandler(
		UserServiceIncrementFollowingAndFollowerCountProcedure,
		svc.IncrementFollowingAndFollowerCount,
		connect.WithSchema(userServiceMethods.ByName("IncrementFollowingAndFollowerCount")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDecrementFollowingAndFollowerCountHandler := connect.NewUnaryHandler(
		UserServiceDecrementFollowingAndFollowerCountProcedure,
		svc.DecrementFollowingAndFollowerCount,
		connect.WithSchema(userServiceMethods.ByName("DecrementFollowingAndFollowerCount")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceFollowUserCachedHandler := connect.NewUnaryHandler(
		UserServiceFollowUserCachedProcedure,
		svc.FollowUserCached,
		connect.WithSchema(userServiceMethods.ByName("FollowUserCached")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUnfollowUserCachedHandler := connect.NewUnaryHandler(
		UserServiceUnfollowUserCachedProcedure,
		svc.UnfollowUserCached,
		connect.WithSchema(userServiceMethods.ByName("UnfollowUserCached")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceInsertFollowerCountsHandler := connect.NewUnaryHandler(
		UserServiceInsertFollowerCountsProcedure,
		svc.InsertFollowerCounts,
		connect.WithSchema(userServiceMethods.ByName("InsertFollowerCounts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceLoginUserProcedure:
			userServiceLoginUserHandler.ServeHTTP(w, r)
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceRefreshTokenProcedure:
			userServiceRefreshTokenHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserByIDProcedure:
			userServiceGetUserByIDHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceFollowUserProcedure:
			userServiceFollowUserHandler.ServeHTTP(w, r)
		case UserServiceUnfollowUserProcedure:
			userServiceUnfollowUserHandler.ServeHTTP(w, r)
		case UserServiceIncrementFollowingAndFollowerCountProcedure:
			userServiceIncrementFollowingAndFollowerCountHandler.ServeHTTP(w, r)
		case UserServiceDecrementFollowingAndFollowerCountProcedure:
			userServiceDecrementFollowingAndFollowerCountHandler.ServeHTTP(w, r)
		case UserServiceFollowUserCachedProcedure:
			userServiceFollowUserCachedHandler.ServeHTTP(w, r)
		case UserServiceUnfollowUserCachedProcedure:
			userServiceUnfollowUserCachedHandler.ServeHTTP(w, r)
		case UserServiceInsertFollowerCountsProcedure:
			userServiceInsertFollowerCountsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.LoginUser is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.RefreshToken is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByID(context.Context, *connect.Request[v1.GetUserByIDRequest]) (*connect.Response[v1.GetUserByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetUserByID is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) FollowUser(context.Context, *connect.Request[v1.FollowUserRequest]) (*connect.Response[v1.FollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.FollowUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UnfollowUser(context.Context, *connect.Request[v1.UnfollowUserRequest]) (*connect.Response[v1.UnfollowUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UnfollowUser is not implemented"))
}

func (UnimplementedUserServiceHandler) IncrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.IncrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.IncrementFollowingAndFollowerCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.IncrementFollowingAndFollowerCount is not implemented"))
}

func (UnimplementedUserServiceHandler) DecrementFollowingAndFollowerCount(context.Context, *connect.Request[v1.DecrementFollowingAndFollowerCountRequest]) (*connect.Response[v1.DecrementFollowingAndFollowerCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.DecrementFollowingAndFollowerCount is not implemented"))
}

func (UnimplementedUserServiceHandler) FollowUserCached(context.Context, *connect.Request[v1.FollowUserCachedRequest]) (*connect.Response[v1.FollowUserCachedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.FollowUserCached is not implemented"))
}

func (UnimplementedUserServiceHandler) UnfollowUserCached(context.Context, *connect.Request[v1.UnfollowUserCachedRequest]) (*connect.Response[v1.UnfollowUserCachedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UnfollowUserCached is not implemented"))
}

func (UnimplementedUserServiceHandler) InsertFollowerCounts(context.Context, *connect.Request[v1.InsertFollowerCountsRequest]) (*connect.Response[v1.InsertFollowerCountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.InsertFollowerCounts is not implemented"))
}
