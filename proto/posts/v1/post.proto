syntax = "proto3";

package posts.v1;


import "google/protobuf/timestamp.proto";
import "user/v1/user.proto";
// Core Post model
message Post {
  int64 id = 1;
  string content = 2;
  string image_url = 3;
  // int64 user_id = 4; // ID of the user who created the post
  user.v1.User user = 4; // User who created the post
  google.protobuf.Timestamp created_at = 5;

}

// For transactional outbox or event publishing
message OutboxEvent {
  string event_id = 1;
  string event_type = 2;
  string payload = 3;
  bool published = 4;
}

message CreatePostIndexedByUserRequest {
  Post post = 1;
}

message CreatePostIndexedByUserResponse {
  bool success = 1;
}

message InitializePostEngagementsRequest {
  int64 post_id = 1;

}

message InitializePostEngagementsResponse {
  bool true = 1;
}


message Like {
  int64 post_id = 1;
  int64 user_id = 2;
  google.protobuf.Timestamp created_at = 3;

}
message CreateLikeRequest {
  int64 post_id = 1;
  int64 user_id = 2;

} 
message CreateLikeResponse {
  Like like = 1;
}

message CreateLikeByUserRequest {
  Like like = 1;

}

message CreateLikeByUserResponse {
  bool created = 1;
}

message IncrementPostLikesRequest {
  int64 post_id = 1;
}

message IncrementPostLikesResponse {
  bool incremented = 1;
}
// Service definition
service PostService {
  rpc CreateLike(CreateLikeRequest) returns (CreateLikeResponse);
  rpc IncrementPostLikes(IncrementPostLikesRequest) returns (IncrementPostLikesResponse);
  rpc CreateLikeByUser(CreateLikeByUserRequest) returns (CreateLikeByUserResponse);
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
  rpc GetPost(GetPostRequest) returns (GetPostResponse);
  rpc ListPostsByUser(ListPostsByUserRequest) returns (ListPostsByUserResponse);
  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse);
  rpc CreatePostIndexedByUser(CreatePostIndexedByUserRequest) returns (CreatePostIndexedByUserResponse);
  rpc InitializePostEngagements(InitializePostEngagementsRequest) returns (InitializePostEngagementsResponse);
  rpc UpdatePostEngagements(UpdatePostEngagementsRequest) returns (UpdatePostEngagementsResponse);
  rpc GetPostWithMetadata(GetPostRequest) returns (GetPostWithMetadataResponse);
}

message GetPostWithMetadataResponse {
  Post post = 1;
  int64 like_count = 2;
  int64 share_count = 3;
  int64 comment_count = 4;
  int64 repost_count = 5;
}

message UpdatePostEngagementsRequest {
  int64 post_id = 1;

}

message UpdatePostEngagementsResponse {
  bool success = 1;

}

// Request/Response messages

message CreatePostRequest {
  string content = 1;
  string image_url = 2;
  int64 user_id = 3;
}

message CreatePostResponse {
  Post post = 1;
}

message GetPostRequest {
  int64 post_id = 1;
}

message GetPostResponse {
  Post post = 1;
}

message ListPostsByUserRequest {
  int64 user_id = 1;        // Filter by user
  int32 page_size = 2;      // Number of posts per page
  bytes paging_state = 3;   // Cassandra paging state (opaque cursor)
}

message ListPostsByUserResponse {
  repeated Post posts = 1;
  bytes paging_state = 2;   // Return for next page query
}

message DeletePostRequest {
  int64 post_id = 1;
}

message DeletePostResponse {
  bool success = 1;
}

message PostEngagements {
  int64 like_count = 1;
  int64 share_count = 2;
  int64 comment_count = 3;
  int64 repost_count = 4;

}